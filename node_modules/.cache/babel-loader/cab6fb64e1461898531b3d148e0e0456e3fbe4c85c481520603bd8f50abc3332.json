{"ast":null,"code":"class IpcService {\n  constructor() {\n    this.ipcRenderer_ = void 0;\n  }\n  send(_channel) {\n    let _request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!this.ipcRenderer_) {\n      this.initializeIpcRenderer_();\n    }\n    if (!_request.responseChannel) {\n      _request.responseChannel = `${_channel}_response_${new Date().getTime()}`;\n    }\n    const ipcRenderer = this.ipcRenderer_;\n    ipcRenderer.send(_channel, _request);\n    return new Promise(_resolve => {\n      ipcRenderer.once(_request.responseChannel, (_event, _response) => _resolve(_response));\n    });\n  }\n  initializeIpcRenderer_() {\n    if (!window || !window.process || !window.require) {\n      throw new Error(`Unable to require renderer process`);\n    }\n    this.ipcRenderer_ = window.require('electron').ipcRenderer;\n  }\n}\nexport default IpcService;","map":{"version":3,"names":["IpcService","constructor","ipcRenderer_","send","_channel","_request","arguments","length","undefined","initializeIpcRenderer_","responseChannel","Date","getTime","ipcRenderer","Promise","_resolve","once","_event","_response","window","process","require","Error"],"sources":["E:/Prog/Project/Spotify-Youtube-PlayList-converter/src/app/ipc-service.ts"],"sourcesContent":["import { IpcRenderer } from 'electron';\r\nimport IpcRequest from \"../shared/ipc-request\";\r\n\r\nclass IpcService {\r\n  private ipcRenderer_?: IpcRenderer;\r\n\r\n  public send<T>(_channel: string, _request: IpcRequest = {}): Promise<T> {\r\n    if (!this.ipcRenderer_) {\r\n      this.initializeIpcRenderer_();\r\n    }\r\n    if (!_request.responseChannel) {\r\n      _request.responseChannel = `${_channel}_response_${new Date().getTime()}`\r\n    }\r\n\r\n    const ipcRenderer = this.ipcRenderer_;\r\n    ipcRenderer.send(_channel, _request);\r\n\r\n    return new Promise((_resolve) => {\r\n      ipcRenderer.once(_request.responseChannel, (_event, _response) => _resolve(_response));\r\n    });\r\n  }\r\n\r\n  private initializeIpcRenderer_() {\r\n    if (!window || !window.process || !window.require) {\r\n      throw new Error(`Unable to require renderer process`);\r\n    }\r\n    this.ipcRenderer_ = window.require('electron').ipcRenderer;\r\n  }\r\n}\r\n\r\nexport default IpcService\r\n"],"mappings":"AAGA,MAAMA,UAAU,CAAC;EAAAC,YAAA;IAAA,KACPC,YAAY;EAAA;EAEbC,IAAIA,CAAIC,QAAgB,EAAyC;IAAA,IAAvCC,QAAoB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACxD,IAAI,CAAC,IAAI,CAACJ,YAAY,EAAE;MACtB,IAAI,CAACO,sBAAsB,CAAC,CAAC;IAC/B;IACA,IAAI,CAACJ,QAAQ,CAACK,eAAe,EAAE;MAC7BL,QAAQ,CAACK,eAAe,GAAI,GAAEN,QAAS,aAAY,IAAIO,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAE,EAAC;IAC3E;IAEA,MAAMC,WAAW,GAAG,IAAI,CAACX,YAAY;IACrCW,WAAW,CAACV,IAAI,CAACC,QAAQ,EAAEC,QAAQ,CAAC;IAEpC,OAAO,IAAIS,OAAO,CAAEC,QAAQ,IAAK;MAC/BF,WAAW,CAACG,IAAI,CAACX,QAAQ,CAACK,eAAe,EAAE,CAACO,MAAM,EAAEC,SAAS,KAAKH,QAAQ,CAACG,SAAS,CAAC,CAAC;IACxF,CAAC,CAAC;EACJ;EAEQT,sBAAsBA,CAAA,EAAG;IAC/B,IAAI,CAACU,MAAM,IAAI,CAACA,MAAM,CAACC,OAAO,IAAI,CAACD,MAAM,CAACE,OAAO,EAAE;MACjD,MAAM,IAAIC,KAAK,CAAE,oCAAmC,CAAC;IACvD;IACA,IAAI,CAACpB,YAAY,GAAGiB,MAAM,CAACE,OAAO,CAAC,UAAU,CAAC,CAACR,WAAW;EAC5D;AACF;AAEA,eAAeb,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}