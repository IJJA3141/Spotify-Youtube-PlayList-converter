{"ast":null,"code":"export class IpcService {\n  constructor() {\n    this.ipcRenderer = void 0;\n  }\n  send(channel) {\n    let request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // If the ipcRenderer is not available try to initialize it\n    if (!this.ipcRenderer) {\n      this.initializeIpcRenderer();\n    }\n    // If there's no responseChannel let's auto-generate it\n    if (!request.responseChannel) {\n      request.responseChannel = `${channel}_response_${new Date().getTime()}`;\n    }\n    const ipcRenderer = this.ipcRenderer;\n    ipcRenderer.send(channel, request);\n\n    // This method returns a promise which will be resolved when the response has arrived.\n    return new Promise(resolve => {\n      ipcRenderer.once(request.responseChannel, (event, response) => resolve(response));\n    });\n  }\n  initializeIpcRenderer() {\n    if (!window || !window.process || !window.require) {\n      throw new Error(`Unable to require renderer process`);\n    }\n    this.ipcRenderer = window.require('electron').ipcRenderer;\n  }\n}","map":{"version":3,"names":["IpcService","constructor","ipcRenderer","send","channel","request","arguments","length","undefined","initializeIpcRenderer","responseChannel","Date","getTime","Promise","resolve","once","event","response","window","process","require","Error"],"sources":["E:/Prog/Project/Spotify-Youtube-PlayList-converter/src/app/IpcService.ts"],"sourcesContent":["import {IpcRenderer} from 'electron';\r\nimport {IpcRequest} from \"../shared/IpcRequest\";\r\n\r\nexport class IpcService {\r\n  private ipcRenderer?: IpcRenderer;\r\n\r\n  public send<T>(channel: string, request: IpcRequest = {}): Promise<T> {\r\n    // If the ipcRenderer is not available try to initialize it\r\n    if (!this.ipcRenderer) {\r\n      this.initializeIpcRenderer();\r\n    }\r\n    // If there's no responseChannel let's auto-generate it\r\n    if (!request.responseChannel) {\r\n      request.responseChannel = `${channel}_response_${new Date().getTime()}`\r\n    }\r\n\r\n    const ipcRenderer = this.ipcRenderer;\r\n    ipcRenderer.send(channel, request);\r\n\r\n    // This method returns a promise which will be resolved when the response has arrived.\r\n    return new Promise(resolve => {\r\n      ipcRenderer.once(request.responseChannel, (event, response) => resolve(response));\r\n    });\r\n  }\r\n\r\n  private initializeIpcRenderer() {\r\n    if (!window || !window.process || !window.require) {\r\n      throw new Error(`Unable to require renderer process`);\r\n    }\r\n    this.ipcRenderer = window.require('electron').ipcRenderer;\r\n  }\r\n}\r\n"],"mappings":"AAGA,OAAO,MAAMA,UAAU,CAAC;EAAAC,YAAA;IAAA,KACdC,WAAW;EAAA;EAEZC,IAAIA,CAAIC,OAAe,EAAwC;IAAA,IAAtCC,OAAmB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACtD;IACA,IAAI,CAAC,IAAI,CAACJ,WAAW,EAAE;MACrB,IAAI,CAACO,qBAAqB,CAAC,CAAC;IAC9B;IACA;IACA,IAAI,CAACJ,OAAO,CAACK,eAAe,EAAE;MAC5BL,OAAO,CAACK,eAAe,GAAI,GAAEN,OAAQ,aAAY,IAAIO,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAE,EAAC;IACzE;IAEA,MAAMV,WAAW,GAAG,IAAI,CAACA,WAAW;IACpCA,WAAW,CAACC,IAAI,CAACC,OAAO,EAAEC,OAAO,CAAC;;IAElC;IACA,OAAO,IAAIQ,OAAO,CAACC,OAAO,IAAI;MAC5BZ,WAAW,CAACa,IAAI,CAACV,OAAO,CAACK,eAAe,EAAE,CAACM,KAAK,EAAEC,QAAQ,KAAKH,OAAO,CAACG,QAAQ,CAAC,CAAC;IACnF,CAAC,CAAC;EACJ;EAEQR,qBAAqBA,CAAA,EAAG;IAC9B,IAAI,CAACS,MAAM,IAAI,CAACA,MAAM,CAACC,OAAO,IAAI,CAACD,MAAM,CAACE,OAAO,EAAE;MACjD,MAAM,IAAIC,KAAK,CAAE,oCAAmC,CAAC;IACvD;IACA,IAAI,CAACnB,WAAW,GAAGgB,MAAM,CAACE,OAAO,CAAC,UAAU,CAAC,CAAClB,WAAW;EAC3D;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}